import maya.cmds as cmds
import re

# === CONFIG ===
FRAMES_PER_SHAPE = 5  # full 100-frame blocks
PEAK_AT_HALF = True

Hud_Shapes = [
    'Funneler','Funneler',
    'Puckerer', 'Puckerer',
    'InnerBrowRaiser', 'InnerBrowRaiser_BrowLowerer', 'BrowLowerer','BrowLowerer',
    'SharpLipPuller', 'SharpLipPuller_LipCornerPuller', 'LipCornerPuller', 'LipCornerPuller', 
    'NoseWrinkler','NoseWrinkler_UpperLipRaiser', 'UpperLipRaiser','UpperLipRaiser',
    'LipCornerDepressor','LipCornerDepressor_LowerLipDepressor', 'LowerLipDepressor','LowerLipDepressor',
    'LipCornerPuller','LipCornerPuller_LipStretcher', 'LipStretcher','LipStretcher',
    'LipCornerPuller','LipCornerPuller_LipStretcher', 'LipCornerPuller_LipStretcher_JawOpen','LipStretcher_JawOpen', 'JawOpen','JawOpen'
]

###################################################################### HUD SHAPES

def hud_attr_path(attr_name):
    return "HUDkcm_blendShape.{0}".format(attr_name)

def cleanup_scene():
    if cmds.objExists('HUDkcm_cube'):
        cmds.delete('HUDkcm_cube')
    if cmds.objExists('HUDkcm_blendShape'):
        cmds.delete('HUDkcm_blendShape')
    for hud_id in ['HUDShapeNames', 'HUDScheduleNow']:
        if cmds.headsUpDisplay(hud_id, exists=True):
            cmds.headsUpDisplay(hud_id, remove=True)
    try:
        cmds.headsUpDisplay(block=7, rem=True)
    except:
        pass
    print("‚úÖ Cleaned up cube and HUD.")

def create_hud_cube_and_blendshape():
    base_cube = cmds.polyCube(name='HUDkcm_cube', width=1, height=1, depth=1)[0]
    targets = []
    for shape in Hud_Shapes:
        tgt = cmds.duplicate(base_cube, name=shape)[0]
        targets.append(tgt)
    blend_node = cmds.blendShape(targets, base_cube, name='HUDkcm_blendShape')[0]
    cmds.delete(targets)
    print("‚úÖ Created blendShape: {0} on cube: {1}".format(blend_node, base_cube))

def get_blendshape_weight_names(node='HUDkcm_blendShape'):
    if not cmds.objExists(node):
        return []
    names = cmds.listAttr(node + '.weight', m=True) or []
    return names

def pretty_name(name):
    return re.sub(r'\d+$', '', name)

# === SCHEDULING ===
def build_shape_schedule(shape_names, start_frame, frames_per_shape):
    """
    Start at start_frame+1 so we get 1‚Äì100, 101‚Äì200, etc.
    """
    schedule = []
    current = int(start_frame) + 1  # shift start by +1
    for shape in shape_names:
        start = current
        end = current + frames_per_shape - 1
        schedule.append({'shape': shape, 'start': start, 'end': end})
        current += frames_per_shape
    return schedule

def print_full_schedule(schedule):
    print("üóìÔ∏è Full Shape Schedule (shifted 1-based ranges):")
    for i, item in enumerate(schedule):
        print("{0:02d}. {1} {2}-{3}".format(i+1, item['shape'], item['start'], item['end']))

def schedule_for_frame(schedule, frame):
    f = int(frame)
    for item in schedule:
        if item['start'] <= f <= item['end']:
            return item
    return None

# === KEYFRAMING ===
def key_hud_shapes(schedule):
    for item in schedule:
        shape = item['shape']
        attr = hud_attr_path(shape)
        if not cmds.objExists(attr):
            print("[Warning] Missing attribute: {0}".format(attr))
            continue
        start = item['start']
        end = item['end']
        mid = start + (end - start) * 0.5
        cmds.setKeyframe(attr, value=0.0, t=start)
        if PEAK_AT_HALF:
            cmds.setKeyframe(attr, value=1.0, t=mid)
        else:
            cmds.setKeyframe(attr, value=1.0, t=start + 1)
        cmds.setKeyframe(attr, value=0.0, t=end)

# === HUD: current shape name only ===
def schedule_now_name_only():
    node = 'HUDkcm_blendShape'
    if not cmds.objExists(node):
        return ''
    if not cmds.objExists(node + ".schedStart") or not cmds.objExists(node + ".schedSpan"):
        return ''
    start_frame = cmds.getAttr(node + ".schedStart")
    span = cmds.getAttr(node + ".schedSpan")
    names = get_blendshape_weight_names(node)
    schedule = build_shape_schedule(names, start_frame, span)
    cur = cmds.currentTime(q=True)
    item = schedule_for_frame(schedule, cur)
    if item:
        return pretty_name(item['shape'])
    return ''

def show_single_hud_name_only():
    for hud_id in ['HUDShapeNames', 'HUDScheduleNow']:
        if cmds.headsUpDisplay(hud_id, exists=True):
            cmds.headsUpDisplay(hud_id, remove=True)
    cmds.headsUpDisplay(
        'HUDShapeNames',
        section=7,
        block=7,
        blockSize='medium',
        dataFontSize='large',
        dataAlignment='left',
        command=schedule_now_name_only,
        attachToRefresh=True
    )

# === RUN EVERYTHING ===
def run_hud_animation():
    cleanup_scene()
    create_hud_cube_and_blendshape()

    start_frame = int(cmds.currentTime(q=True))
    names = get_blendshape_weight_names('HUDkcm_blendShape')
    if not names:
        print("[Warning] No weight attributes found on HUDkcm_blendShape.")
        return

    schedule = build_shape_schedule(names, start_frame, FRAMES_PER_SHAPE)
    print_full_schedule(schedule)

    key_hud_shapes(schedule)

    node = 'HUDkcm_blendShape'
    if cmds.objExists(node):
        if not cmds.objExists(node + ".schedStart"):
            cmds.addAttr(node, ln="schedStart", at="long")
        if not cmds.objExists(node + ".schedSpan"):
            cmds.addAttr(node, ln="schedSpan", at="long")
        cmds.setAttr(node + ".schedStart", start_frame)
        cmds.setAttr(node + ".schedSpan", FRAMES_PER_SHAPE)

    end_of_keys = schedule[-1]['end']
    cmds.playbackOptions(minTime=schedule[0]['start'], maxTime=end_of_keys)
    print("‚úÖ Timeline adjusted to {0} ‚Üí {1}".format(schedule[0]['start'], end_of_keys))

    show_single_hud_name_only()

run_hud_animation()
# cleanup_scene()
