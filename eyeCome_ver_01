import maya.cmds as cmds

# Global config
C_name = 'Face:'
Ctrl_name = 'face_main_ctrl.'

Anim_S_Shapes = ['EyeOpenClosed', 'EyeWide', 'SquintUL', 'LidTightenerUL']
Sequence_EyeRolling = ['EyeIn', 'EyeUp', 'EyeOut', 'EyeDown', 'EyeIn']

def attr_path(attr_name):
    return C_name + Ctrl_name + attr_name

# Key ON (0 → 100)
def key_shape_on(shape_name, start_time):
    parts = [shape_name]
    if shape_name.endswith('UL'):
        base = shape_name[:-2]
        parts = [base + 'Upper', base + 'Lower']
    for name in parts:
        keyed = False
        attr = attr_path(name)
        if cmds.objExists(attr):
            cmds.setAttr(attr, 0)
            cmds.setKeyframe(attr, t=start_time)
            cmds.setAttr(attr, 100)
            cmds.setKeyframe(attr, t=start_time + 10)
            keyed = True
        if not keyed:
            for side in ['l', 'r']:
                side_attr = attr_path(side + name)
                if cmds.objExists(side_attr):
                    cmds.setAttr(side_attr, 0)
                    cmds.setKeyframe(side_attr, t=start_time)
                    cmds.setAttr(side_attr, 100)
                    cmds.setKeyframe(side_attr, t=start_time + 10)

# Key OFF (100 → 0)
def key_shape_off(shape_name, start_time):
    parts = [shape_name]
    if shape_name.endswith('UL'):
        base = shape_name[:-2]
        parts = [base + 'Upper', base + 'Lower']
    for name in parts:
        keyed = False
        attr = attr_path(name)
        if cmds.objExists(attr):
            cmds.setAttr(attr, 100)
            cmds.setKeyframe(attr, t=start_time)
            cmds.setAttr(attr, 0)
            cmds.setKeyframe(attr, t=start_time + 10)
            keyed = True
        if not keyed:
            for side in ['l', 'r']:
                side_attr = attr_path(side + name)
                if cmds.objExists(side_attr):
                    cmds.setAttr(side_attr, 100)
                    cmds.setKeyframe(side_attr, t=start_time)
                    cmds.setAttr(side_attr, 0)
                    cmds.setKeyframe(side_attr, t=start_time + 10)

# Animate eye shapes with overlap logic
def animate_shape_keys(shape_list, start_time):
    current_time = start_time
    for name in shape_list:
        base_name = name
        for side in ['l', 'r']:
            attr = attr_path(side + base_name)
            if not cmds.objExists(attr):
                print("[Warning] Missing attribute: {}".format(attr))
                continue
            # 0 → 100 → 0
            cmds.setAttr(attr, 0)
            cmds.setKeyframe(attr, t=current_time)
            cmds.setAttr(attr, 100)
            cmds.setKeyframe(attr, t=current_time + 10)
            cmds.setAttr(attr, 0)
            cmds.setKeyframe(attr, t=current_time + 20)
        current_time += 10  # overlap step
    print("✅ Eye rolling animation complete.")

# Master sequencer
def Creating_keys(start_time):
    animate_shape_keys(Sequence_EyeRolling, start_time)
    current_time = start_time + 60
    for shape in Anim_S_Shapes:
        key_shape_on(shape, current_time)                      # 0 → 10
        animate_shape_keys(Sequence_EyeRolling, current_time + 10)  # 10 → 70
        key_shape_off(shape, current_time + 70)                # 70 → 80
        current_time += 80  # advance to next shape block
    
    #cmds.playbackOptions(min=start_frame, max=current_time)



def Creating_keys_al1():
    current_time = cmds.currentTime(q=True)
    
    for shape in Anim_S_Shapes:
        key_shape_on(shape, current_time)
        key_shape_off(shape, current_time + 10)
        current_time += 20  # move to next block
    Creating_keys(current_time)
        

Creating_keys_al1()



